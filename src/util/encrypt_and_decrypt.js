'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.decryptBase64 = exports.encryptBase64 = exports.md5Encrypt = exports.decryptByDESModeECB = exports.encryptByAESModeECB = exports.encryptByDESModeECB = void 0;
const config_1 = require('./config');
const CryptoJS = require('../libs/crypto-js.js');
function encryptByDESModeECB(message) {
  const keyHex = CryptoJS.enc.Utf8.parse(config_1.Config.DES_KEY);
  const encrypted = CryptoJS.DES.encrypt(message, keyHex, {
    mode: CryptoJS.mode.ECB,
    padding: CryptoJS.pad.Pkcs7
  });
  return encrypted.ciphertext.toString();
}
exports.encryptByDESModeECB = encryptByDESModeECB;
function encryptByAESModeECB(message) {
  const keyHex = CryptoJS.enc.Utf8.parse(config_1.Config.AES_KEY);
  return CryptoJS.AES.encrypt(message, keyHex, {
    mode: CryptoJS.mode.ECB,
    padding: CryptoJS.pad.Pkcs7
  }).toString();
}
exports.encryptByAESModeECB = encryptByAESModeECB;
function decryptByDESModeECB(ciphertext) {
  const keyHex = CryptoJS.enc.Utf8.parse(config_1.Config.DES_KEY);
  const decrypted = CryptoJS.DES.decrypt(
    {
      ciphertext: CryptoJS.enc.Hex.parse(ciphertext)
    },
    keyHex,
    {
      mode: CryptoJS.mode.ECB,
      padding: CryptoJS.pad.Pkcs7
    }
  );
  return decrypted.toString(CryptoJS.enc.Utf8);
}
exports.decryptByDESModeECB = decryptByDESModeECB;
function md5Encrypt(message) {
  return CryptoJS.MD5(message).toString();
}
exports.md5Encrypt = md5Encrypt;
function encryptBase64(message) {
  return CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(message));
}
exports.encryptBase64 = encryptBase64;
function decryptBase64(message) {
  return CryptoJS.enc.Base64.parse(message).toString(CryptoJS.enc.Utf8);
}
exports.decryptBase64 = decryptBase64;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdF9hbmRfZGVjcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVuY3J5cHRfYW5kX2RlY3J5cHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBS0EsbUNBQWtDO0FBRWxDLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBTWpELFNBQWdCLG1CQUFtQixDQUFDLE9BQWU7SUFDakQsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFO1FBQ3RELElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7UUFDdkIsT0FBTyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSztLQUM1QixDQUFDLENBQUM7SUFDSCxPQUFPLFNBQVMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDekMsQ0FBQztBQVBELGtEQU9DO0FBTUQsU0FBZ0IsbUJBQW1CLENBQUMsT0FBZTtJQUNqRCxJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtRQUMzQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7S0FDNUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ2hCLENBQUM7QUFORCxrREFNQztBQU1ELFNBQWdCLG1CQUFtQixDQUFDLFVBQWtCO0lBQ3BELElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsSUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQ3BDO1FBQ0UsVUFBVSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7S0FDL0MsRUFDRCxNQUFNLEVBQ047UUFDRSxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHO1FBQ3ZCLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7S0FDNUIsQ0FDRixDQUFDO0lBQ0YsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQWJELGtEQWFDO0FBTUQsU0FBZ0IsVUFBVSxDQUFDLE9BQWU7SUFDeEMsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzFDLENBQUM7QUFGRCxnQ0FFQztBQU1ELFNBQWdCLGFBQWEsQ0FBQyxPQUFlO0lBQzNDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLENBQUM7QUFGRCxzQ0FFQztBQU1ELFNBQWdCLGFBQWEsQ0FBQyxPQUFlO0lBQzNDLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hFLENBQUM7QUFGRCxzQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGF1dGhvciDjgYQg54uC5aWU55qE6JyX54mbXG4gKiBAZGF0ZSAyMDIwLzYvMVxuICogQGRlc2Mg5Yqg6Kej5a+GXG4gKi9cbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcblxuY29uc3QgQ3J5cHRvSlMgPSByZXF1aXJlKCcuLi9saWJzL2NyeXB0by1qcy5qcycpO1xuXG4vKipcbiAqIERFUyAgRUNC5qih5byP5Yqg5a+GXG4gKiBAcGFyYW0gbWVzc2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jcnlwdEJ5REVTTW9kZUVDQihtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBrZXlIZXggPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShDb25maWcuREVTX0tFWSk7XG4gIGNvbnN0IGVuY3J5cHRlZCA9IENyeXB0b0pTLkRFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleUhleCwge1xuICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuRUNCLFxuICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN1xuICB9KTtcbiAgcmV0dXJuIGVuY3J5cHRlZC5jaXBoZXJ0ZXh0LnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogQUVTICBFQ0LmqKHlvI/liqDlr4ZcbiAqIEBwYXJhbSBtZXNzYWdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNyeXB0QnlBRVNNb2RlRUNCKG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGtleUhleCA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKENvbmZpZy5BRVNfS0VZKTtcbiAgcmV0dXJuIENyeXB0b0pTLkFFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleUhleCwge1xuICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuRUNCLFxuICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN1xuICB9KS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIERFUyAgRUNC5qih5byP6Kej5a+GXG4gKiBAcGFyYW0gY2lwaGVydGV4dFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdEJ5REVTTW9kZUVDQihjaXBoZXJ0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBrZXlIZXggPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShDb25maWcuREVTX0tFWSk7XG4gIGNvbnN0IGRlY3J5cHRlZCA9IENyeXB0b0pTLkRFUy5kZWNyeXB0KFxuICAgIHtcbiAgICAgIGNpcGhlcnRleHQ6IENyeXB0b0pTLmVuYy5IZXgucGFyc2UoY2lwaGVydGV4dClcbiAgICB9LFxuICAgIGtleUhleCxcbiAgICB7XG4gICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkVDQixcbiAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN1xuICAgIH1cbiAgKTtcbiAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG59XG5cbi8qKlxuICogbWQ1IOWKoOWvhlxuICogQHBhcmFtIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1kNUVuY3J5cHQobWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIENyeXB0b0pTLk1ENShtZXNzYWdlKS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIGJhc2U2NOWKoOWvhlxuICogQHBhcmFtIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY3J5cHRCYXNlNjQobWVzc2FnZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIENyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKG1lc3NhZ2UpKTtcbn1cblxuLyoqXG4gKiBiYXNlNjQg6Kej5a+GXG4gKiBAcGFyYW0gbWVzc2FnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjcnlwdEJhc2U2NChtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gQ3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShtZXNzYWdlKS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG59XG4iXX0=
