'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.request = exports.getDataFromServer = exports.isAbsoluteUrl = void 0;
const config_1 = require('./config');
const encrypt_and_decrypt_1 = require('./encrypt_and_decrypt');
const wx_helper_1 = require('./wx_helper');
const util_1 = require('./util');
function isAbsoluteUrl(url) {
  return /(^[a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
}
exports.isAbsoluteUrl = isAbsoluteUrl;
function _stitchingUrl(url) {
  return isAbsoluteUrl(url) ? url : config_1.Config.HOST.replace(/\/+$/, '') + '/' + url.replace(/^\/+/, '');
}
function _getSignature(params, path, token, timestamp, nonceStr) {
  const keys = Object.keys(params).sort();
  let sign = '';
  for (let _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
    const key = keys_1[_i];
    const value = params[key];
    if (typeof value === 'object' && value !== null) {
      let v = JSON.stringify(params[key]);
      v = v
        .split('')
        .sort()
        .join('');
      sign += key + '=' + v + '&';
    } else {
      if (value !== 0 && !value) {
        params[key] = '';
        sign += key + '=&';
      } else {
        sign += key + '=' + params[key] + '&';
      }
    }
  }
  sign += 'url=' + path + '&';
  sign += token ? 'accessToken=' + token + '&' : '';
  sign += 'timestamp=' + timestamp + '&';
  sign += 'nonceStr=' + nonceStr + '&';
  sign += 'key=' + config_1.Config.PLAM_KEY;
  return encrypt_and_decrypt_1.md5Encrypt(sign);
}
function getDataFromServer(path, method, enableCache, refresh, cacheKey, cacheTimeKey, params) {
  return new Promise(function(resolve, reject) {
    const app = getApp();
    let token = '';
    if (app.globalData.userInfo && app.globalData.userInfo.accessToken) {
      token = app.globalData.userInfo.accessToken;
    }
    const obj = {
      url: path,
      method: method,
      success: function(res) {
        res.data.message = res.data.message === 'No message available' ? '接口不存在，请检查！' : res.data.message;
        if (res.data.message === '签名错误') {
          wx_helper_1.hideLoading();
          wx.removeStorageSync(encrypt_and_decrypt_1.encryptByDESModeECB('user-info'));
          app.globalData.userInfo = {};
          alert({
            content: '您的账号在其他设备登录，如果这不是您的操作，您的登录验证码已经泄露，请重新登录！',
            showCancel: true,
            confirmText: '去登录',
            confirm: function() {},
            cancel: function() {}
          });
          reject();
        } else {
          if ((enableCache || refresh) && res.data.code === 0) {
            wx.setStorageSync(cacheKey, JSON.stringify(res.data));
            wx.setStorageSync(cacheTimeKey, Date.now());
          }
          res.data.backFromCache = false;
          resolve(res.data);
        }
      },
      fail: function(res) {
        console.log(res);
        reject();
      }
    };
    let header = {};
    let timestamp, nonceStr;
    nonceStr = util_1.uuid();
    timestamp = parseInt(((Date.now() + app.globalData.timeDifference) / 1000).toFixed(0), 10);
    if (method === 'POST') {
      header = {
        sign: _getSignature(params, obj.url.replace(config_1.Config.HOST, ''), token, timestamp, nonceStr),
        timestamp: timestamp,
        nonceStr: nonceStr
      };
      obj['data'] = params;
    } else {
      let url = obj.url + '?';
      for (let _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {
        const key = _a[_i];
        url += key + '=' + params[key] + '&';
      }
      url = url.substring(0, url.length - 1);
      obj.url = url;
      header = {
        sign: _getSignature({}, obj.url.replace(config_1.Config.HOST, ''), token, timestamp, nonceStr),
        timestamp: timestamp,
        nonceStr: nonceStr
      };
    }
    if (token) {
      header.accessToken = token;
    }
    obj.header = header;
    wx.request(obj);
  });
}
exports.getDataFromServer = getDataFromServer;
function request(path, params, enableCache, refresh, method) {
  if (params === void 0) {
    params = {};
  }
  if (enableCache === void 0) {
    enableCache = false;
  }
  if (refresh === void 0) {
    refresh = false;
  }
  if (method === void 0) {
    method = 'POST';
  }
  path = _stitchingUrl(path);
  params['source'] = 'miniprogram';
  const cacheKey = encrypt_and_decrypt_1.encryptByDESModeECB(path + JSON.stringify(params));
  const cacheTimeKey = cacheKey + encrypt_and_decrypt_1.encryptByDESModeECB('time');
  if (enableCache && !refresh) {
    let cacheTime = wx.getStorageSync(cacheTimeKey);
    if (cacheTime && cacheKey !== 'undefined') {
      cacheTime = parseInt(cacheTime, 10);
      if (Date.now() - cacheTime < config_1.Config.CACHE_EXPIRE_TIME) {
        const data = wx.getStorageSync(cacheKey);
        if (data && data !== 'undefined') {
          console.log('==== 缓存查询数据返回 ====');
          const result = JSON.parse(data);
          result.backFromCache = true;
          return Promise.resolve(result);
        }
      } else {
        wx.removeStorageSync(cacheKey);
        wx.removeStorageSync(cacheTimeKey);
      }
    }
  }
  console.log('==== 网络查询数据返回 ====');
  return getDataFromServer(path, method, enableCache, refresh, cacheKey, cacheTimeKey, params);
}
exports.request = request;
//# sourceMappingURL=data:application/json;base64,
